#include<iostream>
#include<string>
#include<cmath>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<memory.h>
using namespace std;

struct tree_node{
	int father;
	int val;
	int level;
};
map<int,tree_node> node_map;
int tree[10001];
int inorder[10001];
int preorder[10001];
int node_num;
int test_num;
tree_node build_tree(int preorder_begin,int preorder_end,int inorder_begin,int inorder_end,int level){
	tree_node head_node;
	head_node.level=level;
	head_node.val = preorder[preorder_begin];
	int middle=inorder_begin;
	int size =0;
	for(middle=inorder_begin;middle<=inorder_end;middle++){
		if(head_node.val==inorder[middle]){
			break;
		}
		size++;
	}
	if(size >0){
		tree_node left_node = build_tree(preorder_begin+1,preorder_begin+size,inorder_begin,inorder_begin+size-1,level+1);
		left_node.father=head_node.val;
		node_map[left_node.val]=left_node;
	}
	if(preorder_end-preorder_begin-size >0){
		tree_node rigth_node = build_tree(preorder_begin+size+1,preorder_end,middle+1,inorder_end,level+1);
		rigth_node.father=head_node.val;
		node_map[rigth_node.val]=rigth_node;
	}
	return head_node;
}
int main() {
	ios::sync_with_stdio(false);
	cin >> test_num >> node_num;
	for(int i=1;i<=node_num;i++){
		cin >> inorder[i];
	}
	for(int i=1;i<=node_num;i++){
		cin >> preorder[i];
	}
	tree_node head=build_tree(1,node_num,1,node_num,1);
	node_map[head.val]=head;
	for(int i=0;i<test_num;i++){
		int node_a_val,node_b_val;
		bool a_exist=true,b_exist=true;
		cin >> node_a_val >> node_b_val;
		tree_node node_a = node_map[node_a_val];	
		tree_node node_b = node_map[node_b_val];
		if(node_a.level==0){
			a_exist =false;
		}
		if(node_b.level==0){
			b_exist =false;
		}
		if(!b_exist || !a_exist){
			if(!b_exist && !a_exist){
				cout << "ERROR: "<<node_a_val<<" and "<<node_b_val<<" are not found." << endl;
			} else if(!a_exist){
				cout << "ERROR: "<<node_a_val<<" is not found." << endl;
			} else {
				cout << "ERROR: "<<node_b_val<<" is not found." << endl;
			}
			continue;
		}
		while(node_a.val != node_b.val && node_a.level>=1 && node_b.level>=1){
			if(node_a.level > node_b.level){
				node_a = node_map[node_a.father];
			} else if(node_a.level < node_b.level){
				node_b = node_map[node_b.father];
			} else {
				node_a = node_map[node_a.father];
				node_b = node_map[node_b.father];
			}
		}
		if(node_a.val == node_a_val){
			cout <<node_a_val<<" is an ancestor of "<<node_b_val<<"." << endl;
		} else if(node_b.val == node_b_val){
			cout <<node_b_val<<" is an ancestor of "<<node_a_val<<"." << endl;
		} else{
			cout <<"LCA of "<<node_a_val<<" and "<<node_b_val<<" is "<<node_a.val<<"." << endl;
		}
	}
	return 0;
}